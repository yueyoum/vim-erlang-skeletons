-behaviour(gen_server).

%% API
-export([start_link/0]).

%% gen_server callbacks
-export([init/1,
         handle_call/3,
         handle_cast/2,
         handle_info/2,
         terminate/2,
         code_change/3]).

-define(SERVER, ?MODULE).

-record(state, {}).

%% @doc
%% Starts the server
%% @end
-spec start_link() -> {ok, Pid :: pid()} | ignore | {error, Error}
start_link() ->
    gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).

%% @private
%% @doc
%% Initializes the server
%% @end
-spec init(Args) -> {ok, State} |
                    {ok, State, Timeout} |
                    ignore |
                    {stop, Reason}
init([]) ->
    {ok, #state{}}.

%% @private
%% @doc
%% Handling call messages
%% @end
-spec handle_call(Request, From, State) ->
                                  {reply, Reply, State} |
                                  {reply, Reply, State, Timeout} |
                                  {noreply, State} |
                                  {noreply, State, Timeout} |
                                  {stop, Reason, Reply, State} |
                                  {stop, Reason, State}
handle_call(_Request, _From, State) ->
    Reply = ok,
    {reply, Reply, State}.

%% @private
%% @doc
%% Handling cast messages
%% @end
-spec handle_cast(Msg, State) -> {noreply, State} |
                                 {noreply, State, Timeout} |
                                 {stop, Reason, State}
handle_cast(_Msg, State) ->
    {noreply, State}.

%% @private
%% @doc
%% Handling all non call/cast messages
%% @end
-spec handle_info(Info, State) -> {noreply, State} |
                                  {noreply, State, Timeout} |
                                  {stop, Reason, State}
handle_info(_Info, State) ->
    {noreply, State}.

%% @private
%% @doc
%% This function is called by a gen_server when it is about to
%% terminate. It should be the opposite of Module:init/1 and do any
%% necessary cleaning up. When it returns, the gen_server terminates
%% with Reason. The return value is ignored.
%% @end
-spec terminate(Reason, State) -> void()
terminate(_Reason, _State) ->
    ok.

%% @private
%% @doc
%% Convert process state when code is changed
%% @end
-spec code_change(OldVsn, State, Extra) -> {ok, NewState}
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

